openapi: 3.0.3
info:
  title: MangaLib API
  version: 1.0.0
  description: API для дипломного проекта MangaLib
paths:
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: Аутентификация пользователя по email и паролю. Возвращает JWT токены.
      summary: Вход в систему
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Успешный вход
        '401':
          description: Неверные учетные данные
  /api/users/profile/:
    get:
      operationId: api_users_profile_retrieve
      description: Возвращает информацию об аутентифицированном пользователе.
      summary: Профиль пользователя
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Данные профиля
        '403':
          description: Неавторизованный доступ
  /api/users/refresh/:
    post:
      operationId: api_users_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: Создаёт нового пользователя на основе email, username и пароля.
      summary: Регистрация пользователя
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
        '400':
          description: Ошибка валидации
components:
  schemas:
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
